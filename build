#!/usr/bin/env sh
# This file is part of rustup-wrapper. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/rustup-wrapper/master/COPYRIGHT. No part of rustup-wrapper, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2016 The developers of rustup-wrapper. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/rustup-wrapper/master/COPYRIGHT.


set -e
set -u
set -f


_program_path_find()
{
    if [ "${_program_fattening_program_path+set}" = 'set' ]; then
        printf '%s\n' "$_program_fattening_program_path"

    elif [ "${0%/*}" = "$0" ]; then

        # We've been invoked by the interpreter as, say, bash program
        if [ -r "$0" ]; then
            pwd -P
        # Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
        else
            printf '\n'
        fi

    else

        # We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)

        _program_path_find_parentPath()
        {
            parentPath="${scriptPath%/*}"
            if [ -z "$parentPath" ]; then
                parentPath='/'
            fi
            cd "$parentPath" 1>/dev/null
        }

        # pdksh / mksh have problems with unsetting a variable that was never set...
        if [ "${CDPATH+set}" = 'set' ]; then
            unset CDPATH
        fi

        if command -v realpath 1>/dev/null 2>/dev/null; then
            (
                scriptPath="$(realpath "$0")"

                _program_path_find_parentPath
                pwd -P
            )
        elif command -v readlink 1>/dev/null 2>/dev/null; then
            (
                scriptPath="$0"

                while [ -L "$scriptPath" ]
                do
                    _program_path_find_parentPath
                    scriptPath="$(readlink "$scriptPath")"
                done

                _program_path_find_parentPath
                pwd -P
            )
        else
            # This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
            (
                scriptPath="$0"

                _program_path_find_parentPath
                pwd -P
            )
        fi

    fi
}

build_fail()
{
	local failureMessage="$1"
	
	printf '%s\n' "$failureMessage" 1>&2
	exit 1
}

build_ensureRequiredBinariesArePresent()
{
	local reason="$1"
	shift 1
	
	local binary
	local missing=false
	for binary in "$@"
	do
		if ! command -v "$binary" 1>/dev/null 2>/dev/null; then
			printf '%s\n' "The binary '$binary' needs to be in the path" 1>&2
			missing=true
		fi
	done
	
	if $missing; then
		build_fail "Please make sure that the missing binaries are installed because '$reason'"
	fi
}

build_downloadPrebuiltOfficialBinaries()
{
	local target
	for target in \
		aarch64-unknown-linux-gnu \
		arm-unknown-linux-gnueabi arm-unknown-linux-gnueabihf armv7-unknown-linux-gnueabihf \
		i686-apple-darwin i686-pc-windows-gnu i686-pc-windows-msvc i686-unknown-linux-gnu \
		x86_64-apple-darwin x86_64-pc-windows-gnu x86_64-pc-windows-msvc x86_64-unknown-freebsd x86_64-unknown-linux-gnu x86_64-unknown-netbsd
	do
		_build_downloadPrebuiltOfficialBinary "$target"
	done
}

_build_downloadPrebuiltOfficialBinary()
{
	local target="$1"
	
	local destinationFolderPath="$bootstrapFolderPath"/"$target"
	rm -rf "$destinationFolderPath"
	mkdir "$destinationFolderPath"
	
	local destinationFilePath="$destinationFolderPath"/rustup-init
	
	case "$target" in
		
		*-windows-*)
			local fileNameExtension='.exe'
		;;
		
		*)
			local fileNameExtension=''
		;;
		
	esac
		
	cd "$destinationFolderPath" 1>/dev/null 2>/dev/null
	
		wget 'https://static.rust-lang.org/rustup/dist/'"$target"'/rustup-init'"$fileNameExtension"
	
	cd - 1>/dev/null 2>/dev/null
	
	chmod +x "$destinationFilePath""$fileNameExtension"
}

build_downloadIndependentLinuxMuslBinaries()
{
	local prefix=.multirust/toolchains/"$channelTarget"

	local destinationFolderPath="$bootstrapFolderPath"/"$target"
	local destinationUserFolderPath="$destinationFolderPath"/user
	
	rm -rf "$destinationFolderPath"
	mkdir -m 0700 -p "$destinationUserFolderPath"
	
	local rustupFolderPath="$destinationUserFolderPath"/.multirust
	mkdir -m 0700 -p "$rustupFolderPath"/tmp "$rustupFolderPath"/toolchains "$rustupFolderPath"/update-hashes
	mkdir -m 0700 -p "$destinationFolderPath"/"$prefix"
	
	# 20 byte hash
	# touch "$rustupFolderPath"/update-hashes/"$channelTarget"
	
	for downloadFile in \
		cargo-0.11.0-nightly-x86_64-alpine-linux-musl \
		rustc-"$pkgver"-x86_64-unknown-linux-musl \
		rust-std-"$pkgver"-x86_64-unknown-linux-musl
	do
		cd "$destinationFolderPath" 1>/dev/null 2>/dev/null
		
			wget "$baseUrl"/"$downloadFile".tar.gz
			wget "$baseUrl"/"$downloadFile".tar.gz.sha1
			tar --extract --gzip --file "$downloadFile".tar.gz
				
		cd - 1>/dev/null 2>/dev/null
		
		local path
		if [ "$downloadFile" = cargo-0.11.0-nightly-x86_64-alpine-linux-musl ]; then
			path="$destinationFolderPath"/cargo-nightly-"$target"
		else
			path="$destinationFolderPath"/"$downloadFile"
		fi
		
		cd "$path" 1>/dev/null 2>/dev/null
			
			local components="$(cat components | tr $'\n' ',')"
			echo "$components"
			#  --libdir="$prefix"/lib --mandir="$prefix"/share/man
			./install.sh --destdir="$destinationUserFolderPath" --prefix="$prefix" --components="$components" --disable-ldconfig --disable-verify --verbose
			rm "$destinationUserFolderPath"/"$prefix"/lib/rustlib/install.log
			rm "$destinationUserFolderPath"/"$prefix"/lib/rustlib/uninstall.sh
			
		cd - 1>/dev/null 2>/dev/null
		
		rm -rf "$path"
		
	done
}

build_createBootstrapStaticallyLinkedBinaryForLinuxMusl()
{
	local binaryName="$1"
	local packageName="$2"
	shift 2
	
	local target='x86_64-unknown-linux-musl'
	local dockerName='build-rust-for-x86_64-unknown-linux-musl'
	local dockerBuildFolderPath="$dockerFolderPath"/"$dockerName"
	local destinationFolderPath="$bootstrapFolderPath"/"$target"
	
	mkdir -m 0755 -p "$destinationFolderPath"
	rm -rf "$destinationFolderPath"/"$binaryName"
	
	cd "$dockerBuildFolderPath"/home/rust/packages/"$packageName" 1>/dev/null 2>/dev/null

		cargo clean
		git checkout -q -- .
		git reset -q --hard
		git clean -d --force --quiet -x .
		
		docker run --rm --tty --interactive --volume "$(pwd)":/home/rust/src ekidd/rust-musl-builder \
			cargo build --release "$@"
		
		mv target/"$target"/release/"$binaryName" "$destinationFolderPath"
		
		cargo clean
		git checkout -q -- .
		git reset -q --hard
		git clean -d --force --quiet -x .
		
	cd - 1>/dev/null 2>/dev/null	
}

build_createBootstrapStaticallyLinkedBinariesForLinuxMusl()
{
	build_createBootstrapStaticallyLinkedBinaryForLinuxMusl rustup-init rustup.rs --features='curl-backend no-self-update'
}

build_buildRustDockerForLinuxMusl()
{
	# See also https://github.com/docker/docker/issues/928
	# Remove dangling images: docker rmi "$(docker images --filter dangling=true)" - except this can include in-build images!
	# Needs bash
	"$_program_path"/tools/docker-clean/docker-clean
	
	local imageId
	docker images --all --format '{{.Repository}}_{{.Tag}}\t{{.ID}}' | awk '$1 ~ /^<none>_'"$dockerName"'<none>$/ {print $2}' | while IFS= read -r imageId
	do
		docker rmi "$imageId"
	done
	
	cd "$dockerBuildFolderPath" 1>/dev/null 2>/dev/null

		docker build --force-rm --rm --tag "$dockerName" "$dockerBuildFolderPath"
		
	cd - 1>/dev/null 2>/dev/null
}

build_dockerRunCargo()
{
	local packageName='rustup.rs'
	local binaryName='rustup-init'
	
	cd "$dockerBuildFolderPath"/home/rust/packages/"$packageName" 1>/dev/null 2>/dev/null

		cargo clean
		git checkout -q -- .
		git reset -q --hard
		git clean -d --force --quiet -x .
		
		docker run --rm --tty --interactive --volume "$(pwd)":/home/rust/build "$dockerName" \
			cargo build --release "$@"
		
		mv target/"$target"/release/"$binaryName" "$destinationFolderPath"
		
		cargo clean
		git checkout -q -- .
		git reset -q --hard
		git clean -d --force --quiet -x .
		
	cd - 1>/dev/null 2>/dev/null	
}

build_main()
{
	# See http://git.alpinelinux.org/cgit/aports/tree/testing/rust/APKBUILD
	local baseUrl='https://alpine.geeknet.cz/distfiles'
	local pkgver='1.10.0'
	local target='x86_64-unknown-linux-musl'
	local channel='stable'
	local channelTarget="$channel"-"$target"
	local dockerName='build-rust-for-x86_64-unknown-linux-musl'
	
	local _program_path="$(_program_path_find)"
	cd "$_program_path" 1>/dev/null 2>/dev/null
		_program_path="$(pwd -P)"
	cd - 1>/dev/null 2>/dev/null

	local bootstrapFolderPath="$_program_path"/bootstrap
	local dockerFolderPath="$_program_path"/docker
	local dockerBuildFolderPath="$dockerFolderPath"/"$dockerName"
	
	build_ensureRequiredBinariesArePresent rm mkdir wget chmod git cp mv docker awk tar gunzip cat tr
	
	#build_downloadPrebuiltOfficialBinaries
	
	#build_downloadIndependentLinuxMuslBinaries
		
	build_buildRustDockerForLinuxMusl
	
	build_dockerRunCargo
}

build_main "$@"
